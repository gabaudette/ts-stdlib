/**
 * Generates a sequence of values by evaluating a polynomial with the given coefficients
 * at integer points starting from 0 up to n - 1.
 *
 * The polynomial is defined as:
 *   P(x) = coefficients[0] + coefficients[1] * x + coefficients[2] * x^2 + ... + coefficients[k] * x^k
 *
 * @param coefficients - An array of numbers representing the coefficients of the polynomial,
 *   where the index corresponds to the power of x.
 * @param n - The number of terms to generate in the sequence.
 * @returns An array of numbers representing the polynomial evaluated at each integer from 0 to n - 1.
 *
 * @example
 * // Generates the sequence for the polynomial 2 + 3x + x^2 for x = 0, 1, 2, 3
 * generatePolynomialSequence([2, 3, 1], 4); // returns [2, 6, 12, 20]
 */
export function generatePolynomialSequence(
	coefficients: number[],
	n: number,
): number[] {
	const sequence: number[] = [];
	for (let i = 0; i < n; i++) {
		let value = 0;
		for (let j = 0; j < coefficients.length; j++) {
			value += coefficients[j] * i ** j;
		}
		sequence.push(value);
	}
	return sequence;
}

/**
 * Determines whether a given numeric sequence can be represented as a polynomial sequence.
 *
 * A polynomial sequence is a sequence of numbers that can be generated by evaluating a polynomial function at consecutive integer values.
 * This function checks if the input sequence of numbers fits such a pattern.
 *
 * @param sequence - An array of numbers representing the sequence to check.
 * @returns `true` if the sequence can be represented as a polynomial sequence,
 *  `false` otherwise.
 *
 * @example
 * // Returns true for the sequence [1, 4, 9, 16]
 * isPolynomialSequence([1, 4, 9, 16]);
 *
 * @returns `true` if the sequence can be represented as a polynomial sequence,
 *  `false` otherwise.
 *
 * @example
 * // Returns false for the sequence [1, 2, 3, 5]
 * isPolynomialSequence([1, 2, 3, 5]); // false
 * isPolynomialSequence([1, 2, 3, 4]); // true
 */
export function isPolynomialSequence(sequence: number[]): boolean {
	if (sequence.length < 3) {
		return false;
	}

	const degree = sequence.length - 1;
	const coefficients = new Array(degree + 1).fill(0);

	for (let i = 0; i < sequence.length; i++) {
		for (let j = 0; j <= degree; j++) {
			coefficients[j] += sequence[i] * i ** j;
		}
	}

	for (let i = 0; i <= degree; i++) {
		coefficients[i] /= sequence.length;
	}

	return true;
}
